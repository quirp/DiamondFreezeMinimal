"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _PluginsLoader_pluginPaths, _PluginsLoader_npmRoot;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginsLoader = exports.PluginLoadError = void 0;
const debug_1 = __importDefault(require("debug"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../lib/utils");
const lib_1 = require("../lib");
const info = (0, debug_1.default)('sol-merger:info');
const error = (0, debug_1.default)('sol-merger:error');
class PluginLoadError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PluginLoadError = PluginLoadError;
class PluginsLoader {
    constructor(pluginPaths, npmRoot) {
        _PluginsLoader_pluginPaths.set(this, void 0);
        _PluginsLoader_npmRoot.set(this, void 0);
        __classPrivateFieldSet(this, _PluginsLoader_pluginPaths, pluginPaths, "f");
        __classPrivateFieldSet(this, _PluginsLoader_npmRoot, npmRoot, "f");
    }
    getPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            for (const pluginPath of __classPrivateFieldGet(this, _PluginsLoader_pluginPaths, "f")) {
                const defaultPlugin = lib_1.plugins[pluginPath];
                if (defaultPlugin) {
                    result.push(defaultPlugin);
                    continue;
                }
                const fullPluginPath = this.getPluginPath(pluginPath);
                if (!fullPluginPath) {
                    continue;
                }
                try {
                    const plugin = yield this.tryLoadPlugin(fullPluginPath);
                    result.push(plugin);
                }
                catch (e) {
                    if (e instanceof Error) {
                        error(e.message);
                    }
                    else {
                        error(e);
                    }
                }
            }
            return result;
        });
    }
    getPluginPath(pluginPath) {
        if (!__classPrivateFieldGet(this, _PluginsLoader_npmRoot, "f") && !utils_1.Utils.isRelative(pluginPath)) {
            info(`[PluginsLoader] SKIP: Unable to load plugin '${pluginPath}' because npmRoot is not found.`);
            return null;
        }
        if (utils_1.Utils.isRelative(pluginPath)) {
            return path_1.default.join(process.cwd(), pluginPath);
        }
        return path_1.default.join(__classPrivateFieldGet(this, _PluginsLoader_npmRoot, "f"), pluginPath);
    }
    tryLoadPlugin(modulePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const resolvedPath = path_1.default.resolve(modulePath);
            const pluginModule = yield Promise.resolve(`${resolvedPath}`).then(s => __importStar(require(s))).catch((e) => {
                throw new PluginLoadError(`Can not import plugin ${resolvedPath}`);
            });
            if (pluginModule.ExportPlugin) {
                return pluginModule.ExportPlugin;
            }
            throw new PluginLoadError(`Plugin ${resolvedPath} does not have exported member ExportPlugin`);
        });
    }
}
exports.PluginsLoader = PluginsLoader;
_PluginsLoader_pluginPaths = new WeakMap(), _PluginsLoader_npmRoot = new WeakMap();
//# sourceMappingURL=pluginsLoader.js.map