"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ExportPluginsRegistry_plugins;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportPluginsRegistry = void 0;
class ExportPluginsRegistry {
    constructor(plugins) {
        _ExportPluginsRegistry_plugins.set(this, void 0);
        __classPrivateFieldSet(this, _ExportPluginsRegistry_plugins, plugins.map((PluginCtor) => new PluginCtor()), "f");
    }
    processExport(e) {
        if (!__classPrivateFieldGet(this, _ExportPluginsRegistry_plugins, "f").length) {
            return e;
        }
        return __classPrivateFieldGet(this, _ExportPluginsRegistry_plugins, "f").reduce((latestExport, plugin) => {
            if (!latestExport) {
                return null;
            }
            return plugin.processExport(latestExport);
        }, e);
    }
    registerPlugin(plugin) {
        __classPrivateFieldGet(this, _ExportPluginsRegistry_plugins, "f").push(plugin);
    }
}
exports.ExportPluginsRegistry = ExportPluginsRegistry;
_ExportPluginsRegistry_plugins = new WeakMap();
//# sourceMappingURL=pluginsRegistry.js.map